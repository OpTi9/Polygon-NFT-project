{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Aza/Desktop/projects/coronft/start-over/contract/dapp/hashlips_nft_minting_dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Aza/Desktop/projects/coronft/start-over/contract/dapp/hashlips_nft_minting_dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// log\nimport store from\"../store\";var fetchDataRequest=function fetchDataRequest(){return{type:\"CHECK_DATA_REQUEST\"};};var fetchDataSuccess=function fetchDataSuccess(payload){return{type:\"CHECK_DATA_SUCCESS\",payload:payload};};var fetchDataFailed=function fetchDataFailed(payload){return{type:\"CHECK_DATA_FAILED\",payload:payload};};export var fetchData=function fetchData(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var totalSupply;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(fetchDataRequest());_context.prev=1;_context.next=4;return store.getState().blockchain.smartContract.methods.totalSupply().call();case 4:totalSupply=_context.sent;// let cost = await store\n//   .getState()\n//   .blockchain.smartContract.methods.cost()\n//   .call();\ndispatch(fetchDataSuccess({totalSupply:totalSupply// cost,\n}));_context.next=12;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);console.log(_context.t0);dispatch(fetchDataFailed(\"Could not load data from contract.\"));case 12:case\"end\":return _context.stop();}}},_callee,null,[[1,8]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Users/Aza/Desktop/projects/coronft/start-over/contract/dapp/hashlips_nft_minting_dapp/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","dispatch","getState","blockchain","smartContract","methods","totalSupply","call","console","log"],"mappings":"2ZAAA;AACA,MAAOA,CAAAA,KAAP,KAAkB,UAAlB,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC7B,MAAO,CACLC,IAAI,CAAE,oBADD,CAAP,CAGD,CAJD,CAMA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,OAAD,CAAa,CACpC,MAAO,CACLF,IAAI,CAAE,oBADD,CAELE,OAAO,CAAEA,OAFJ,CAAP,CAID,CALD,CAOA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACD,OAAD,CAAa,CACnC,MAAO,CACLF,IAAI,CAAE,mBADD,CAELE,OAAO,CAAEA,OAFJ,CAAP,CAID,CALD,CAOA,MAAO,IAAME,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAC7B,+FAAO,iBAAOC,QAAP,kIACLA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR,CADK,sCAGqBD,CAAAA,KAAK,CAC1BQ,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYC,WAFZ,GAGrBC,IAHqB,EAHrB,QAGCD,WAHD,eAOH;AACA;AACA;AACA;AAEAL,QAAQ,CACNJ,gBAAgB,CAAC,CACfS,WAAW,CAAXA,WACA;AAFe,CAAD,CADV,CAAR,CAZG,+EAmBHE,OAAO,CAACC,GAAR,cACAR,QAAQ,CAACF,eAAe,CAAC,oCAAD,CAAhB,CAAR,CApBG,oEAAP,+DAuBD,CAxBM","sourcesContent":["// log\r\nimport store from \"../store\";\r\n\r\nconst fetchDataRequest = () => {\r\n  return {\r\n    type: \"CHECK_DATA_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchDataSuccess = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst fetchDataFailed = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const fetchData = () => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchDataRequest());\r\n    try {\r\n      let totalSupply = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.totalSupply()\r\n        .call();\r\n      // let cost = await store\r\n      //   .getState()\r\n      //   .blockchain.smartContract.methods.cost()\r\n      //   .call();\r\n\r\n      dispatch(\r\n        fetchDataSuccess({\r\n          totalSupply,\r\n          // cost,\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}